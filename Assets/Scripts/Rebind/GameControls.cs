//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Rebind/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""GameAction"",
            ""id"": ""19823dc0-4b4a-4cb6-91f4-c2caa3f0ad73"",
            ""actions"": [
                {
                    ""name"": ""BackQute"",
                    ""type"": ""Button"",
                    ""id"": ""eca0b6e4-8015-41c9-9355-8994e84b9e43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnterAction"",
                    ""type"": ""Button"",
                    ""id"": ""929de90f-7859-4514-84f3-55f436d9b80e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Value"",
                    ""id"": ""f75c623d-18b7-467d-be58-9904754d1b72"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e904b111-7fec-4128-acc2-b0841dd9cc41"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackQute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10ca5435-4cc6-445a-8eab-29e2e8af53a3"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d560d403-3517-4ab8-9af6-a712819b4f22"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2979c45d-d727-45df-a4ea-2fe285899261"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameAction
        m_GameAction = asset.FindActionMap("GameAction", throwIfNotFound: true);
        m_GameAction_BackQute = m_GameAction.FindAction("BackQute", throwIfNotFound: true);
        m_GameAction_EnterAction = m_GameAction.FindAction("EnterAction", throwIfNotFound: true);
        m_GameAction_Touch = m_GameAction.FindAction("Touch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameAction
    private readonly InputActionMap m_GameAction;
    private IGameActionActions m_GameActionActionsCallbackInterface;
    private readonly InputAction m_GameAction_BackQute;
    private readonly InputAction m_GameAction_EnterAction;
    private readonly InputAction m_GameAction_Touch;
    public struct GameActionActions
    {
        private @GameControls m_Wrapper;
        public GameActionActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BackQute => m_Wrapper.m_GameAction_BackQute;
        public InputAction @EnterAction => m_Wrapper.m_GameAction_EnterAction;
        public InputAction @Touch => m_Wrapper.m_GameAction_Touch;
        public InputActionMap Get() { return m_Wrapper.m_GameAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActionActions set) { return set.Get(); }
        public void SetCallbacks(IGameActionActions instance)
        {
            if (m_Wrapper.m_GameActionActionsCallbackInterface != null)
            {
                @BackQute.started -= m_Wrapper.m_GameActionActionsCallbackInterface.OnBackQute;
                @BackQute.performed -= m_Wrapper.m_GameActionActionsCallbackInterface.OnBackQute;
                @BackQute.canceled -= m_Wrapper.m_GameActionActionsCallbackInterface.OnBackQute;
                @EnterAction.started -= m_Wrapper.m_GameActionActionsCallbackInterface.OnEnterAction;
                @EnterAction.performed -= m_Wrapper.m_GameActionActionsCallbackInterface.OnEnterAction;
                @EnterAction.canceled -= m_Wrapper.m_GameActionActionsCallbackInterface.OnEnterAction;
                @Touch.started -= m_Wrapper.m_GameActionActionsCallbackInterface.OnTouch;
                @Touch.performed -= m_Wrapper.m_GameActionActionsCallbackInterface.OnTouch;
                @Touch.canceled -= m_Wrapper.m_GameActionActionsCallbackInterface.OnTouch;
            }
            m_Wrapper.m_GameActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BackQute.started += instance.OnBackQute;
                @BackQute.performed += instance.OnBackQute;
                @BackQute.canceled += instance.OnBackQute;
                @EnterAction.started += instance.OnEnterAction;
                @EnterAction.performed += instance.OnEnterAction;
                @EnterAction.canceled += instance.OnEnterAction;
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
            }
        }
    }
    public GameActionActions @GameAction => new GameActionActions(this);
    public interface IGameActionActions
    {
        void OnBackQute(InputAction.CallbackContext context);
        void OnEnterAction(InputAction.CallbackContext context);
        void OnTouch(InputAction.CallbackContext context);
    }
}
